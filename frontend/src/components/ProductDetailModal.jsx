import React, { useState, useContext, useEffect } from 'react';
import { FaFireAlt, FaStar, FaCheck, FaTags, FaTimes } from 'react-icons/fa';
import { useNotification } from '../contexts/NotificationContext';
import { fetchWithAuth, createOrder, fetchBalance } from '../utils/api'; // Import fetchWithAuth, createOrder, and fetchBalance
import AuthContext from '../contexts/AuthContext';
import { useBalance } from '../contexts/BalanceContext';
import ConfirmationModal from './ConfirmationModal';
import PostPurchaseModal from './PostPurchaseModal';

// üîñ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ó‡πá‡∏Å‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
const ProductTag = ({ tag }) => {
  const baseClass =
    'text-xs px-2 py-1 rounded-full flex items-center gap-1 shadow';

  switch (tag) {
    case '‡πÉ‡∏´‡∏°‡πà':
      return (
        <span className={`bg-blue-500 text-white ${baseClass}`}>
          <FaFireAlt className="text-white text-xs" />
          ‡πÉ‡∏´‡∏°‡πà
        </span>
      );
    case '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥':
      return (
        <span className={`bg-yellow-400 text-black ${baseClass}`}>
          <FaCheck className="text-black text-xs" />
          ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        </span>
      );
    case '‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ':
      return (
        <span className={`bg-red-500 text-white ${baseClass}`}>
          <FaStar className="text-white text-xs" />
          ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
        </span>
      );
    case '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©':
      return (
        <span className={`bg-pink-500 text-white ${baseClass}`}>
          <FaTags className="text-white text-xs" />
          ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©
        </span>
      );
    default:
      return null;
  }
};

const ProductDetailModal = ({ product, onClose }) => {
  const { user } = useContext(AuthContext);
  const { showNotification } = useNotification();
  const { setBalance } = useBalance();
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [hasAccess, setHasAccess] = useState(false);
  const [showPostPurchase, setShowPostPurchase] = useState(false);

  useEffect(() => {
    const checkAccess = async () => {
      if (!user || !product?.id) return;
      try {
        const response = await fetchWithAuth(`/api/orders/check-access/${product.id}`, user.token);
        setHasAccess(response.hasAccess);
      } catch (error) {
        console.error('Error checking access:', error);
        setHasAccess(false);
      }
    };
    
    checkAccess();
  }, [user, product?.id]);

  if (!product) return null;

  const handlePurchaseClick = () => {
    if (!user) {
      showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 'error');
      return;
    }
    setShowConfirmation(true);
  };

  const handleConfirmPurchase = async () => {
    setShowConfirmation(false);
    try {
      const price = Number(product.price);
      const currentBalance = await fetchBalance(user.token);

      if (currentBalance < price) {
        showNotification(`‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${currentBalance} ‡∏ö‡∏≤‡∏ó, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${price} ‡∏ö‡∏≤‡∏ó) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô`, 'error');
        return;
      }

      const orderData = {
        items: [
          {
            productId: product.id,
            quantity: 1,
            price: price
          }
        ],
        total: price,
        customer_name: user.name
      };

      const response = await createOrder(orderData, user.token);
        
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const updatedBalanceResponse = await fetchBalance(user.token);
      setBalance(updatedBalanceResponse.balance);
        
      if (response.success) {
        onClose(); 
        setShowPostPurchase(true); 
      }

      showNotification('‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
    } catch (error) {
      console.error('Checkout error:', error);
      if (error.message.includes('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠')) {
        showNotification('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', 'error');
      } else {
        showNotification(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 'error');
      }
    }
  };

  return (
    <>
      <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center">
        <div className="bg-white dark:bg-gray-800 text-black dark:text-white rounded-xl p-6 w-full max-w-md shadow-xl relative">
          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î */}
          <button
            onClick={onClose}
            className="absolute top-2 right-2 text-gray-500 hover:text-red-500"
          >
            <FaTimes className="w-6 h-6" />
          </button>

          {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <h3 className="text-xl font-bold mb-4">{product.name}</h3>

          {/* ‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <img
            src={product.image}
            alt={product.name}
            className="w-full h-48 object-contain mb-4 rounded-lg"
          />

          {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
          <div className="flex justify-between items-center mb-4">
            <p className="text-2xl font-bold text-yellow-500">{product.price}</p>
          </div>

          {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
          <div className="mb-4">
            <h4 className="font-semibold mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</h4>
            <p className="text-gray-600 dark:text-gray-300">
              {product.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}
            </p>
          </div>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á) */}
          {hasAccess && product.secret_data && (
            <div className="mb-4 p-3 bg-gray-100 dark:bg-gray-700 rounded">
              <h4 className="font-semibold mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</h4>
              <pre className="whitespace-pre-wrap text-sm">
                {product.secret_data}
              </pre>
            </div>
          )}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <div className="flex justify-center gap-3 mt-4">
            <button
              onClick={handlePurchaseClick}
              disabled={product.stock === 0}
              className={`w-full px-4 py-2 rounded-lg ${
                product.stock === 0
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-yellow-500 hover:bg-yellow-600 text-white'
              }`}
            >
              {product.stock === 0 ? '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î' : '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢'}
            </button>
          </div>
        </div>
      </div>

      {/* Confirmation Modal */}
      <ConfirmationModal
        isOpen={showConfirmation}
        message={`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ${product.name} ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ø${product.price} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`}
        onConfirm={handleConfirmPurchase}
        onCancel={() => setShowConfirmation(false)}
      />

      {/* Post Purchase Modal */}
      <PostPurchaseModal 
        isOpen={showPostPurchase}
        onClose={() => setShowPostPurchase(false)}
      />
    </>
  );
};

export default ProductDetailModal;
